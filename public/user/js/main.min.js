const tabButtons = document.querySelectorAll('.VtuTab2 .buydata2');
const tabContents = document.querySelectorAll('.ItermsLists');

tabButtons.forEach(button => {
    button.addEventListener('click', () => {
        // Remove 'active' class from all buttons and contents
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));

        // Add 'active' class to the clicked button and corresponding content
        const tabId = button.getAttribute('data-tab');
        const tabContent = document.getElementById(tabId);

        button.classList.add('active');
        tabContent.classList.add('active');
    });
});



//Code that work on close button on modal
const overlay = document.getElementById("overlay");
const closeModalButton = document.getElementById("closeModal");
const modal = document.getElementById("myModal"); 

const closeModalWithAnimation = () => {
    modal.classList.add("fade-out"); 
    setTimeout(() => {
        overlay.style.display = "none"; 
    }, 300); 
};

closeModalButton.addEventListener("click", closeModalWithAnimation);




//Code for copy referral link

document.getElementById("copyButton").addEventListener("click", function() {
    // Get the input element
    var inputElement = document.getElementById("copyInput");

    // Select the text inside the input element
    inputElement.select();

    try {
        // Attempt to copy the selected text to the clipboard using the Clipboard API
        navigator.clipboard.writeText(inputElement.value)
            .then(function() {
                // Show a simple alert
                alert("Copied to clipboard!");
            })
            .catch(function(err) {
                console.error("Clipboard API failed, falling back to document.execCommand: ", err);
                // Fallback for browsers that don't support the Clipboard API
                document.execCommand("copy");

                // Show a simple alert
                alert("Copied to clipboard (fallback)!");
            });
    } catch (err) {
        console.error("Unable to copy to clipboard: ", err);
    }
});


function togglePopup() {
    const popup = document.getElementById("popup");
    if (popup.style.display === "flex") {
        popup.style.display = "none";
    } else {
        popup.style.display = "flex";
    }
}

function openPopup() {
    const popup = document.getElementById("popup");
    popup.style.display = "flex";
}

function closePopup() {
    const popup = document.getElementById("popup");
    popup.style.display = "none";
}

function togglePopup() {
    const resell = document.getElementById("resell");
    
    if (resell.style.display === "flex" || resell.style.display === "") {
        resell.style.display = "none";
    } else {
        resell.style.display = "flex";
    }
}

function digitalPopup() {
    const digital = document.getElementById("digital");
    
    if (digital.style.display === "flex" || digital.style.display === "") {
        digital.style.display = "none";
    } else {
        digital.style.display = "flex";
    }
}


//Change password form validation

/*const form = document.getElementById('form');
const currentpassword = document.getElementById('currentpassword');
const newpassword = document.getElementById('newpassword');
const confirmpassword = document.getElementById('confirmpassword');


form.setAttribute('novalidate', true);

form.addEventListener('submit', e => {
    e.preventDefault();

    validateInputs();
});

const setError = (element, message) => {
    const proPass = element.parentElement;
    const errorDisplay = proPass.querySelector('.error');

    errorDisplay.innerText = message;
    proPass.classList.add('error');
    proPass.classList.remove('success');
};

const setSuccess = element => {
    const proPass = element.parentElement;
    const errorDisplay = proPass.querySelector('.error');

    errorDisplay.innerText = '';
    proPass.classList.add('success');
    proPass.classList.remove('error');
};

const validateInputs = () => {
    const currentpasswordValue = currentpassword.value.trim();
    const newpasswordValue = newpassword.value.trim();
    const confirmpasswordValue = confirmpassword.value.trim();

    if (currentpasswordValue === '') {
        setError(currentpassword, 'Current Password is required');
    } else {
        setSuccess(currentpassword);
    }

    if (newpasswordValue === '') {
        setError(newpassword, 'New Password is required');
    } else if (newpasswordValue.length < 10) {
        setError(newpassword, 'New Password must be at least 10 characters.');
    } else {
        setSuccess(newpassword);
    }

    if (confirmpasswordValue === '') {
        setError(confirmpassword, 'Please confirm your new password');
    } else if (confirmpasswordValue !== newpasswordValue) {
        setError(confirmpassword, "Passwords don't match");
    } else {
        setSuccess(confirmpassword);
    }
};*/




const swiper = new Swiper('.swiper', {

    slidesPerView: 1,
    spaceBetween: 10,
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
    autoplay: {
      delay: 2000, 
      disableOnInteraction: false,
    },
  });